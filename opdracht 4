import os
from deep_translator import GoogleTranslator

def split_text(text, max_len=500):
    """Split lange tekst op in stukjes van max_len tekens, bij voorkeur bij spatie of newline."""
    chunks = []
    start = 0
    while start < len(text):
        end = min(start + max_len, len(text))
        # probeer bij spatie of newline te splitsen voor beter resultaat
        split_pos = max(text.rfind(' ', start, end), text.rfind('\n', start, end))
        if split_pos == -1 or split_pos <= start:
            split_pos = end
        chunks.append(text[start:split_pos].strip())
        start = split_pos
    return chunks

def translate_text(text, target_lang='en'):
    chunks = split_text(text)
    translator = GoogleTranslator(target=target_lang)
    translated_chunks = []
    for chunk in chunks:
        translated_chunks.append(translator.translate(chunk))
    return '\n'.join(translated_chunks)

def translate_directory(source_dir, output_dir, target_lang='en'):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    files = [f for f in os.listdir(source_dir) if f.lower().endswith('.txt')]
    print(f'Aantal tekstbestanden gevonden: {len(files)}')

    for filename in files:
        print(f'Vertaal bestand: {filename}')
        source_path = os.path.join(source_dir, filename)
        output_path = os.path.join(output_dir, filename)

        with open(source_path, 'r', encoding='utf-8') as f:
            text = f.read()

        try:
            translated_text = translate_text(text, target_lang)
            with open(output_path, 'w', encoding='utf-8') as f_out:
                f_out.write(translated_text)
        except Exception as e:
            print(f'Fout bij vertalen van {filename}: {e}')

if __name__ == '__main__':
    source = input('Pad naar map met teksten (source): ').strip()
    output = input('Pad naar map voor vertaalde teksten (output): ').strip()
    lang = input('Doeltaal (bijv. en, nl, fr): ').strip()

    translate_directory(source, output, lang)